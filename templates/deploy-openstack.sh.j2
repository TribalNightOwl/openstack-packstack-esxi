#!/bin/bash
set -e  # Exit on any error

source config.sh

echo Creating VMs in the ESXi server
docker_run /files/terraform  "terraform init"
docker_run /files/terraform  "terraform apply -auto-approve"
docker_run /files "ansible-playbook playbooks/esxi-attach-iso-to-vm.yaml"
docker_run /files "ansible-playbook playbooks/esxi-expose-hardware-assisted-virtualization-to-guest-os.yaml"
docker_run /files "ansible-playbook playbooks/esxi-power-on-vm.yaml"

echo Start web server to offer kickstart file
KICKSTART_DIR=/tmp/kickstart-openstack
mkdir ${KICKSTART_DIR}
cp ks.cfg ${KICKSTART_DIR}
chmod -R 755 ${KICKSTART_DIR}
docker run --rm --name openstack-nginx -v ${KICKSTART_DIR}:/usr/share/nginx/html:ro -p 80:80 -d nginx:1.19
printf "\ncurl http://${LOCAL_IP}/ks.cfg\n"


printf "\n######  ATTENTION #######\n"
printf "The helper node console will be opened\n"
printf "Hit <TAB> to access the boot menu and boot with the following options:\n"
printf "\n\n\nvmlinux initrd=initrd.img ks=http://${LOCAL_IP}/ks.cfg\n\n\n"
printf "Close the vmrc window after successful installation and rebooting the helpernode\n\n"
BOOTSTRAPVM=$(ssh root@${ESXI_SERVER} vim-cmd vmsvc/getallvms |grep openstack | cut -f1 -d ' ')
vmrc --host=${ESXI_SERVER} --user=root --password=$TF_VAR_esxi_password --moid=$BOOTSTRAPVM

echo Stopping web server
docker stop openstack-nginx
rm -rf ${KICKSTART_DIR}

echo Copy openstack ssh host key to your known hosts file
ssh-keygen -f "${HOME}/.ssh/known_hosts" -R "${OPENSTACKNODE}" || true
ssh-keyscan -H ${OPENSTACKNODE} >> ${HOME}/.ssh/known_hosts

docker_run /files "ansible-playbook playbooks/openstack-node-config.yaml"
docker_run /files "ansible-playbook playbooks/openstack-test.yaml"

printf "\nhttp://{{ vm.openstack.ipaddr }}\n"
